name: CMake RELEASE

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions: write-all

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  cmake-release:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    # pre
    - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
    - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
    - run: uname -a    
    - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
    - name: Check initial GCC version
      run: gcc -v
    - name: Install GCC v13
      uses: egor-tensin/setup-gcc@v1
      with:
        version: 13
    - name: Check installed GCC version
      run: gcc -v
      
    - name: Install Google Test
      run: sudo apt-get update && sudo apt-get install libgtest-dev -y

    - name: Install Boost Components
      run: sudo apt-get install libboost-program-options-dev -y
      
    - name: Install gcovr
      run: sudo apt-get -y install gcovr
      
    - name: Check out repository code
      uses: actions/checkout@v3
      with:
        clean: false
        fetch-depth: 0
        submodules: true
    - run: git describe --tags --dirty
    - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."  
  
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        cmake -B ${{github.workspace}}/build -S ${{github.workspace}} \
          -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
          -DBUILD_TESTING=ON \
          -DENABLE_COVERAGE=ON \
          -DCMAKE_CXX_FLAGS="-g -O0 -fsanitize=undefined -fsanitize=address -fsanitize=leak -fno-omit-frame-pointer"

    - name: Build
      run: cmake --build ${{github.workspace}}/build --target install

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
#       run: ctest -C ${{env.BUILD_TYPE}}
      run: ctest -T Test --verbose

    - name: Test Coverage report
      working-directory: ${{github.workspace}}/build
      run: ctest -T Coverage
      
    - name: Integration test
      working-directory: ${{github.workspace}}/tests
      run: |
        chmod +x ./test.sh
        test.sh

    - run: echo "üçè This job's status is ${{ job.status }}."
